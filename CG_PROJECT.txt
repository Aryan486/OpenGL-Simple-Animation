#include<stdio.h>
#include<iostream>
#include<gl/glut.h>
#include<math.h>
#include<gl/GL.h>
using namespace std;

//functions
void drawCircle(float,float,float,int);
void tree();
void scene();
void drawSun();
void drawMoon();
void drawCloud();
void drawBoat();
void boat();
void cloud();
void cloud2();
void sun();
void moon();
void init();

//global variables
float cloud_X = 0;
float cloud_Y = 0;
float cloud_X2 = 0;
float cloud_Y2 = 0;
float boatX = 0;
float boatY = 0;
float sunY = 700;
float moonY = 550;
float sunMov = 0.0f;
float moonMov = 0.0f;
int cloudStatus = 1;
int boatStatus = 1;
int sunset = 0;

//draw circle
void drawCircle(float cx, float cy, float r, int segments)
{
	glBegin(GL_POLYGON);
	for (int i = 0; i < segments; i++)
	{
		float theta = 2.0f * 3.1415926f * float(i) / float(segments);
		float x = r * cosf(theta);
		float y = r * sinf(theta);
		glVertex2f(x + cx, y + cy);
	}
	glEnd();
}

//draw the tree
void tree()
{
	glPushMatrix();

	glBegin(GL_POLYGON);                     //stem of tree
	glColor3f(1.2, 0.5, 0.4);
	glVertex2i(338, 385);
	glVertex2i(362, 385);
	glVertex2i(362, 510);
	glVertex2i(338, 510);
	glEnd();

	glColor3f(0, 0.8, 0.1);                 //leaves of tree 
	drawCircle(328, 505, 20, 1000);
	drawCircle(348, 505, 20, 1000);
	drawCircle(368, 505, 20, 1000);
	drawCircle(318, 525, 20, 1000);
	drawCircle(338, 525, 20, 1000);
	drawCircle(358, 525, 20, 1000);
	drawCircle(378, 525, 20, 1000);
	drawCircle(328, 545, 20, 1000);
	drawCircle(348, 545, 20, 1000);
	drawCircle(368, 545, 20, 1000);
	drawCircle(348, 560, 20, 1000);
	glPopMatrix();
}

//components of scene
void scene()
{
	glPushMatrix();

	glBegin(GL_POLYGON);             //sky
	glColor3f(0.4, 0.5, 1.0);
	glVertex2i(0, 800);
	glVertex2i(1200, 800);
	glColor3f(0.7, 0.7, 1.0);
	glVertex2i(1200, 0);
	glVertex2i(0, 0);
	glEnd();

	sun();                           //display sun

	moon();                          //display moon

	glBegin(GL_POLYGON);             //ground
	glColor3f(0, 0.5, 0);
	glVertex2i(0, 200);
	glVertex2i(200, 350);
	glVertex2i(400, 400);
	glVertex2i(600, 350);
	glVertex2i(800, 320);
	glVertex2i(1000, 300);
	glColor3f(0.1, 0.9, 0.1);
	glVertex2i(1200, 200);
	glVertex2i(1200, 100);
	glVertex2i(0, 100);
	glEnd();

	glBegin(GL_POLYGON);               //river
	glColor3f(0.4, 0.4, 1.1);
	glVertex2i(0, 100);
	glVertex2i(200, 120);
	glVertex2i(400, 140);
	glVertex2i(600, 150);
	glColor3f(0.2, 0.3, 1.1);
	glVertex2i(800, 140);
	glVertex2i(1000, 120);
	glVertex2i(1200, 100);
	glVertex2i(1200, 0);
	glVertex2i(0, 0);
	glEnd();

	tree();

	glBegin(GL_POLYGON);               //house
	glColor3f(0.9, 0.7, 0.1);
	glVertex2i(350, 380);
	glVertex2i(350, 460);
	glVertex2i(430, 460);
	glVertex2i(430, 380);
	glEnd();

	glBegin(GL_POLYGON);               //house
	glColor3f(0.9, 0, 0);
	glVertex2i(340, 460);
	glVertex2i(390, 500);
	glVertex2i(440, 460);
	glEnd();

	glBegin(GL_POLYGON);               //door
	glColor3f(1, 1, 0);
	glVertex2i(370, 380);
	glVertex2i(370, 430);
	glVertex2i(410, 430);
	glVertex2i(410, 380);
	glEnd();

	glBegin(GL_POLYGON);               //mushroom
	glColor3f(1, 0, 0);
	glVertex2i(910, 315);
	glVertex2i(920, 330);
	glVertex2i(930, 330);
	glVertex2i(940, 315);
	glEnd();

	glBegin(GL_POLYGON);               //mushroom
	glColor3f(0.9, 0.8, 0);
	glVertex2i(922, 300);
	glVertex2i(919, 315);
	glVertex2i(931, 315);
	glVertex2i(928, 300);
	glEnd();

	glBegin(GL_POLYGON);               //grass 1 (in the middle)
	glColor3f(0, 0.8, 0.1);
	glVertex2i(780, 315);
	glVertex2i(770, 330);
	glVertex2i(780, 325);
	glVertex2i(775, 340);
	glVertex2i(785, 330);
	glVertex2i(787, 350);
	glVertex2i(790, 330);
	glVertex2i(800, 340);
	glVertex2i(795, 325);
	glVertex2i(805, 330);
	glVertex2i(795, 315);
	glEnd();

	glBegin(GL_POLYGON);                //grass 2 (right side one)
	glColor3f(0, 0.8, 0.1);
	glVertex2i(810, 310);
	glVertex2i(800, 325);
	glVertex2i(810, 320);
	glVertex2i(805, 335);
	glVertex2i(815, 325);
	glVertex2i(817, 345);
	glVertex2i(820, 325);
	glVertex2i(830, 335);
	glVertex2i(825, 320);
	glVertex2i(835, 325);
	glVertex2i(825, 310);
	glEnd();

	glBegin(GL_POLYGON);                //grass 3 (left hand one close to house)
	glColor3f(0, 0.8, 0.1);
	glVertex2i(440, 375);
	glVertex2i(430, 390);
	glVertex2i(440, 385);
	glVertex2i(435, 400);
	glVertex2i(445, 390);
	glVertex2i(447, 410);
	glVertex2i(450, 390);
	glVertex2i(460, 400);
	glVertex2i(455, 385);
	glVertex2i(465, 390);
	glVertex2i(455, 375);
	glEnd();

	glBegin(GL_POLYGON);               //Bush 1 (left most on right hand side) 
	glColor3f(0.0, 0.5, 0.1);
	glVertex2i(1085, 105);
	glVertex2i(1070, 125);
	glVertex2i(1060, 135);
	glVertex2i(1080, 125);
	glVertex2i(1070, 155);
	glVertex2i(1090, 135);
	glVertex2i(1095, 175);
	glColor3f(0.8, 0.8, 0.1);
	glVertex2i(1100, 135);
	glVertex2i(1120, 155);
	glVertex2i(1110, 125);
	glVertex2i(1130, 135);
	glVertex2i(1120, 125);
	glVertex2i(1105, 105);
	glEnd();

	glBegin(GL_POLYGON);                //Bush 2 (right most on right hand side) 
	glColor3f(0.0, 0.6, 0.1);
	glVertex2i(1135, 100);
	glVertex2i(1120, 120);
	glVertex2i(1110, 130);
	glVertex2i(1130, 120);
	glVertex2i(1120, 150);
	glVertex2i(1140, 130);
	glVertex2i(1145, 170);
	glColor3f(0.8, 0.8, 0.1);
	glVertex2i(1150, 130);
	glVertex2i(1170, 150);
	glVertex2i(1160, 120);
	glVertex2i(1180, 130);
	glVertex2i(1170, 120);
	glVertex2i(1155, 100);
	glEnd();

	glBegin(GL_POLYGON);                  //Bush 3 (left most on left hand side)
	glColor3f(0.0, 0.6, 0.1);
	glVertex2i(35, 100);
	glVertex2i(20, 120);
	glVertex2i(10, 130);
	glVertex2i(30, 120);
	glVertex2i(20, 150);
	glVertex2i(40, 130);
	glVertex2i(45, 170);
	glColor3f(0.8, 0.8, 0.1);
	glVertex2i(50, 130);
	glVertex2i(70, 150);
	glVertex2i(60, 120);
	glVertex2i(80, 130);
	glVertex2i(70, 120);
	glVertex2i(55, 100);
	glEnd();

	glBegin(GL_POLYGON);                //Bush 4 (right most on left hand side)
	glColor3f(0.0, 0.6, 0.1);
	glVertex2i(95, 110);
	glVertex2i(80, 130);
	glVertex2i(70, 140);
	glVertex2i(90, 130);
	glVertex2i(80, 160);
	glVertex2i(100, 130);
	glColor3f(0.8, 0.7, 0.1);
	glVertex2i(105, 180);
	glVertex2i(110, 140);
	glVertex2i(130, 160);
	glVertex2i(120, 130);
	glVertex2i(140, 140);
	glVertex2i(130, 130);
	glVertex2i(115, 110);
	glEnd();

	glPopMatrix();
}

//draw sun 
void drawSun()
{
	glPushMatrix();
	glColor3f(3, 1, 0.5);
	drawCircle(900, 700, 40, 1000);
	glPopMatrix();
}

//draw moon
void drawMoon()
{
	glPushMatrix();
	glColor3f(0.90, 0.90, 0.70);
	drawCircle(200, 550, 30, 1000);
	glPopMatrix();
}

//draw clouds
void drawCloud()
{
	glPushMatrix();

	glColor3f(0.8, 0.8, 0.8);
	drawCircle(200, 690, 25, 1000);             //1st cloud
	drawCircle(230, 700, 25, 1000);
	drawCircle(180, 700, 25, 1000);
	drawCircle(210, 720, 25, 1000);


	drawCircle(600, 590, 25, 1000);             //2nd cloud
	drawCircle(630, 600, 25, 1000);
	drawCircle(580, 600, 25, 1000);
	drawCircle(610, 620, 25, 1000);

	glPopMatrix();
}

//draw boat
void drawBoat()
{
	glPushMatrix();

	glBegin(GL_POLYGON);
	glColor3f(0.9, 0.8, 0.1);
	glVertex2i(270, 155);
	glVertex2i(375, 165);
	glVertex2i(480, 155);
	glColor3f(1.9, 0.9, 0.1);
	glVertex2i(400, 20);
	glVertex2i(270, 20);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.9, 0.1, 0.1);
	glVertex2i(250, 20);
	glVertex2i(180, 100);
	glVertex2i(380, 80);
	glColor3f(0.8, 0.3, 0.1);
	glVertex2i(600, 100);
	glVertex2i(500, 20);
	glEnd();

	glPopMatrix();
}

//instructions for boat
void boat()
{
	if (boatStatus == 1)
	{
		boatX += 0.5;
	}
	if (boatX > 1000)
	{
		boatX = -600;
	}
	glPushMatrix();
	glTranslatef(boatX, boatY, 0);
	drawBoat();
	glPopMatrix();
}

//instructions for cloud 1
void cloud()
{
	if (cloudStatus == 1)
	{
		cloud_X += 0.2;
	}
	if (cloud_X > 1100)
	{
		cloud_X = -650;
	}
	glPushMatrix();
	glTranslatef(cloud_X, cloud_Y, 0);
	drawCloud();
	glPopMatrix();
}

//instructions for cloud 2
void cloud2()
{
	if (cloudStatus == 1)
	{
		cloud_X2 += 0.3;
	}
	if (cloud_X > 1100)
	{
		cloud_X = -1150;
	}
	glPushMatrix();
	glTranslatef(cloud_X2 + 500, cloud_Y2 + 50, 0);
	drawCloud();
	glPopMatrix();
}

//instructions for sun 
void sun()
{
	if (sunset == 1)
	{
		if (sunY < 200)
		{
			glDisable(GL_LIGHT0);
			sunMov += 0;
		}
		else
		{
			sunMov -= 0.4;
			sunY -= 0.4;
		}
	}
	if (sunset == 0)
	{
		if (sunY < 700)
		{
			sunY += 0.4;
			sunMov += 0.4;
		}
		if (sunY >= 400)
		{
			glEnable(GL_LIGHT0);
		}
	}
	glPushMatrix();
	glTranslatef(0, sunMov, 0);
	drawSun();
	glPopMatrix();

}

//instructions for moon
void moon()
{
	if (sunset == 1)
	{
		if (moonY < 550)
		{
			moonY += 0.2;
			moonMov += 0.2;
		}
	}
	if (sunset == 0)
	{
		if (moonY < 100)
		{
			moonMov += 0;
		}
		else
		{
			moonMov -= 0.2;
			moonY -= 0.2;
		}
	}
	glPushMatrix();
	glTranslatef(0, moonMov, 0);
	drawMoon();
	glPopMatrix();
}

//keyboard function
void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		case 'b':
		{
			boatStatus = 1;
			break;
		}
		case 'v':
		{
			boatStatus = 0;
			break;
		}
		case 'c':
		{
			cloudStatus = 1;
			break;
		}
		case 'x':
		{
			cloudStatus = 0;
			break;
		}
		case 'd':
		{
			sunset = 0;
			break;
		}
		case 'n':
		{
			sunset = 1;
			break;
		}
		default:break;
	}
}

//display function (renders scene)
void display()
{
	scene();
	boat();
	cloud();
	cloud2();
	glFlush();
	glutPostRedisplay();
	glutSwapBuffers();
}

//init function for glut
void init()
{
	glClearColor(0, 0, 1, 0);
	glColor3f(1.0f, 1.0f, 1.0f);
	glPointSize(0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, 1200, 0, 800);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
}

//main function
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(1350, 700);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("CG");
	glutKeyboardFunc(keyboard);
	glutDisplayFunc(display);
	init();
	cout << "------------COMMAND LIST--------------\nPress->\n'b' -> Move Boat\n'v' -> Stop Boat\n'c' -> Move Clouds\n'x' -> Stop Clouds\n'd' -> Day\n'n' -> Night ";
	glutMainLoop();
	return 0;
}